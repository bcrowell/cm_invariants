/* Reissner-Nordstrom spacetime */

load(ctensor);
ct_coords:[t,r,theta,phi];
assume(m>0);
/* Metric from Lenk */
lg:matrix([-(1-2*m/r+e^2/r^2),0,0,0],
          [0,1/(1-2*m/r+e^2/r^2),0,0],
          [0,0,r^2,0],
          [0,0,0,r^2*sin(theta)^2])$
load("cm_invariants.mac");
cm_invariants();

cm_do_tests();

cm_print_invariants();

/* Lenk, http://www.ronlenk.com */

cm_assert("Reissner-Nordstrom R",is(equal(cm_r(),0)));
cm_assert("Reissner-Nordstrom R1",is(equal(cm_r1(),e^4/r^8)));
cm_assert("Reissner-Nordstrom R2",is(equal(cm_r2(),0)));
cm_assert("Reissner-Nordstrom R3",is(equal(cm_r3(),e^8/(4*r^16))));

cm_assert("Reissner-Nordstrom M1",is(equal(cm_m1(),2*(m*r-e^2)*e^4/r^12)));
cm_assert("Reissner-Nordstrom M2",is(equal(cm_m2(),4*(m*r-e^2)^2*e^4/r^16)));
cm_assert("Reissner-Nordstrom M3",is(equal(cm_m3(),4*(m*r-e^2)^2*e^4/r^16)));
cm_assert("Reissner-Nordstrom M4",is(equal(cm_m4(),0)));
cm_assert("Reissner-Nordstrom M5",is(equal(cm_m5(),8*(m*r-e^2)^3*e^4/r^20)));

cm_assert("Reissner-Nordstrom W1",is(equal(cm_w1(),6*(m*r-e^2)^2/r^8)));
cm_assert("Reissner-Nordstrom W2",is(equal(cm_w2(),6*(m*r-e^2)^3/r^12)));


