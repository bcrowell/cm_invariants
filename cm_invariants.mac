 /*-----------------------------------------------------------------
  Carminati-McLenaghan invariants, 
    https://en.wikipedia.org/wiki/Carminati%E2%80%93McLenaghan_invariants
  (c) 2015 B. Crowell

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License as
  published by the Free Software Foundation; either version 2 of
  the License, or (at your option) any later version.
 ------------------------------------------------------------------*/

cm_trig_simp:true; /* apply trigonometric substitutions? */
cm_rat_simp:true;  /* rationally simplify results? */

/*
  First set up the metric, then call cm_invariants() to calculate all invariants.
*/
cm_invariants():=block (
  if dim#4 then error("Error: dim=",dim,", Carminati-McLenaghan invariants are only defined in 4 dimensions"),
  cm_init(),
  cm_calculate_all_invariants()
)$

cm_do_trig_simp(x):=block(
  if cm_trig_simp then trigsimp(x) else x
)$
cm_do_rat_simp(x):=block(
  if cm_trig_simp then ratsimp(x) else x
)$

/* R=R_i^i, the Ricci scalar, scalar curvature */
cm_r():=cm_do_trig_simp(cm_do_rat_simp(sum(uric[%ii,%ii],%ii,1,dim)))$

/*
  Calculate all the tensors that we'll be repeatedly referring to when calculating
  the invariants.
*/
cm_init():=block (
  /* Make sure the following have been calculated: */
  cmetric(false),
  lriemann(false),
  uriemann(false),
  ricci(false), /* compute the ricci tensor ric[i,j]=R_ij */
  uricci(false), /* compute the mixed ricci tensor uric[i,j]=R_i^j */
  weyl(false), /* compute Weyl tensor */
  /* Compute some globals specific to the CM code: */
  cm_init_eps(),
  cm_init_s(),
  cm_init_weyl()
)$

cm_init_s():=block (
  %rr:cm_r(),
  /* trace-free Ricci tensor, cm_s[i,j]=S_ij=R_ij-(1/4)Rg_ij */
  array(cm_s,dim,dim),
  for %ii thru dim do
    for %jj thru dim do
      cm_s[%ii,%jj] : ric[%ii,%jj]-(1/4)*%rr*lg[%ii,%jj],
  /* mixed version, cm_us[i,j]=S^i_j */
  for %ii thru dim do
    for %jj thru dim do
      cm_us[%ii,%jj] : sum(ug[%ii,%kk]*cm_s[%kk,%jj],%kk,1,dim),
  /* fully contravariant version, cm_uus[i,j]=S^ij */
  for %ii thru dim do
    for %jj thru dim do
      cm_uus[%ii,%jj] : sum(ug[%jj,%kk]*cm_us[%ii,%kk],%kk,1,dim)
)$

/* R_1=(1/4)S^i_j S^j_i */
cm_r1():=cm_do_trig_simp(cm_do_rat_simp((1/4)*sum(sum(cm_us[%ii,%jj]*cm_us[%jj,%ii],%jj,1,dim),%ii,1,dim)))$

/* R_2=(-1/8)S^i_j S^j_k S^k_i */
cm_r2():=cm_do_trig_simp(cm_do_rat_simp((-1/8)*sum(sum(sum(
              cm_us[%ii,%jj]*cm_us[%jj,%kk]*cm_us[%kk,%ii],%kk,1,dim),%jj,1,dim),%ii,1,dim)))$

/* R_3=(1/16)S^i_j S^j_k S^k_l S^l_i */
cm_r3():=cm_do_trig_simp(cm_do_rat_simp((1/16)*sum(sum(sum(sum(cm_us[%ii,%jj]*cm_us[%jj,%kk]*cm_us[%kk,%ll]*cm_us[%ll,%ii],
                                        %ll,1,dim),%kk,1,dim),%jj,1,dim),%ii,1,dim)))$

/* Input p is an array of integers; this routine is meant to be used for small arrays, will
   not have good performance on large arrays.
   Returns -1, 0, or +1, depending on whether p is an even or odd permutation away from being sorted.
   Algorithm: http://math.stackexchange.com/a/290787/13618
*/
cm_parity(p):= block
(
  result:1,
  n:length(p),
  for i: 1 thru n-1 do
    for j: i+1 thru n do block (
      if p[i]>p[j] then result:-result,
      if is(equal(p[i],p[j])) then result:0
    ),
  result
)$

/* Levi-Civita tensor 
  This is the tensorial quantity. The orientation is defined implicitly by the order of the coordinates in
        the coordinate chart chosen.
*/
cm_init_eps():= block (
  array(cm_eps,dim,dim,dim,dim),
  cm_root_gdet:sqrt(-gdet), /* gdet is determinant of metric, computed by cmetric */
  for %ii thru dim do
    for %jj thru dim do
      for %kk thru dim do
        for %ll thru dim do
          cm_eps[%ii,%jj,%kk,%ll] : cm_do_trig_simp(cm_do_rat_simp(cm_root_gdet*cm_parity([%ii,%jj,%kk,%ll])))
)$

/*
  Initialize the Weyl tensor in all its flavors.
*/
cm_init_weyl():=block (
  /*
  Weyl tensor, C_ijkl

  Problems with lack of documentation on how indices of weyl[] are defined.
     http://sourceforge.net/p/maxima/mailman/message/34644270/
  Did some reverse-engineering using Schwarzschild metric.
  The indices on weyl[] are definitely scrambled compared to the literature, because,e.g, [1122] doesn't vanish.
  If I define cm_c[l,i,j,k]:weyl[i,j,k,l], the symmetry makes sense (antisymm on indices 1,2 and 3,4).
       This is consistent with the order of indices on the various flavors of the Riemann tensor that ctensor builds:
       riem[i,j,k,l]=R^l_ijk according to http://maxima.sourceforge.net/docs/manual/maxima_26.html
    Yes, comment in ctensor.mac, line 1217, says "The computation of the Weyl tensor follows the same index ordering."
  At line 1387 in the source, we have:
       weyl[l,j,i,k]:ctaylor(lriem[l,j,i,k]+
  So it's all lower indices.
  I have three types of checks I can do: (1) symmetry, (2) units, (3) trace-free.
  */
  array(cm_c,dim,dim,dim,dim),
  for %ii thru dim do
    for %jj thru dim do
      for %kk thru dim do
        for %ll thru dim do
          cm_c[%ll,%ii,%jj,%kk]:weyl[%ii,%jj,%kk,%ll],

  /* mixed form of Weyl tensor, C_ij^kl
  */
  array(cm_c_mixed,dim,dim,dim,dim),
  for %ii thru dim do
    for %jj thru dim do
      for %kk thru dim do
        for %ll thru dim do
          cm_c_mixed[%ii,%jj,%kk,%ll] : cm_do_trig_simp(cm_do_rat_simp(sum(sum(
              ug[%kk,%m]*ug[%ll,%n]*cm_c[%ii,%jj,%m,%n],
            %m,1,dim),%n,1,dim))),

  /* upper-index form of Weyl tensor, C^ijkl
  */
  array(cm_c_upper,dim,dim,dim,dim),
  for %ii thru dim do
    for %jj thru dim do
      for %kk thru dim do
        for %ll thru dim do
          cm_c_upper[%ii,%jj,%kk,%ll] : cm_do_trig_simp(cm_do_rat_simp(sum(sum(
              ug[%ii,%m]*ug[%jj,%n]*cm_c_mixed[%m,%n,%kk,%ll],
            %m,1,dim),%n,1,dim))),

  /* left Hodge dual of Weyl tensor, *C_ijkl 
     We're forming these duals using the tensorial Levi-Civita tensor cm_eps, not the tensor-density version;
     this makes sense because our goal is to form a tensorial quantity (a scalar) in the end, and we're also
     doing things like adding C to *C, which wouldn't make sense if they had different transformation
     properties.
  */
  array(cm_c_star,dim,dim,dim,dim),
  for %ii thru dim do
    for %jj thru dim do
      for %kk thru dim do
        for %ll thru dim do
          cm_c_star[%ii,%jj,%kk,%ll] : cm_do_trig_simp(cm_do_rat_simp(sum(sum(
              (1/2)*cm_eps[%kk,%ll,%m,%n]*cm_c_mixed[%ii,%jj,%m,%n],
            %m,1,dim),%n,1,dim))),

  /* mixed form, *C_ij^kl */
  array(cm_c_star_mixed,dim,dim,dim,dim),
  for %ii thru dim do
    for %jj thru dim do
      for %kk thru dim do
        for %ll thru dim do
          cm_c_star_mixed[%ii,%jj,%kk,%ll] : sum(sum(
              ug[%kk,%m]*ug[%ll,%n]*cm_c_star[%ii,%jj,%m,%n],
            %m,1,dim),%n,1,dim),

  /* mixed form, *C^ijkl */
  array(cm_c_star_upper,dim,dim,dim,dim),
  for %ii thru dim do
    for %jj thru dim do
      for %kk thru dim do
        for %ll thru dim do
          cm_c_star_upper[%ii,%jj,%kk,%ll] : cm_do_trig_simp(cm_do_rat_simp(sum(sum(
              ug[%ii,%m]*ug[%jj,%n]*cm_c_star_mixed[%m,%n,%kk,%ll],
            %m,1,dim),%n,1,dim))),

  /* Weyl tensor with bivector indices, C_A^B
  */
  cm_bivector_dim:dim*(dim-1)/2, /* normally = 6 */
  cm_c_bivector:zeromatrix(cm_bivector_dim,cm_bivector_dim),
  %AA:0,
  for %ii:1 thru dim-1 do
    for %jj:%ii+1 thru dim do block (
      %AA:%AA+1,
      %BB:0,
      for %kk:1 thru dim-1 do
        for %ll:%kk+1 thru dim do block (
          %BB:%BB+1,
          %xx:cm_c_mixed[%ii,%jj,%kk,%ll], /* C_ij^kl */
          cm_c_bivector[%AA,%BB]:%xx,
          cm_c_bivector[%BB,%AA]:%xx
        )
    )

)$

cm_m3():=cm_do_trig_simp(cm_do_rat_simp(
  (1/16)*sum(sum(sum(sum(sum(sum(
    cm_uus[%bb,%cc]*cm_s[%ee,%ff]*(cm_c[%aa,%bb,%cc,%dd]*cm_c_upper[%aa,%ee,%ff,%dd]
                                   +cm_c_star[%aa,%bb,%cc,%dd]*cm_c_star_upper[%aa,%ee,%ff,%dd]),
  %aa,1,dim),%bb,1,dim),%cc,1,dim),%dd,1,dim),%ee,1,dim),%ff,1,dim)
))$

cm_m4():=cm_do_trig_simp(cm_do_rat_simp(
  (-1/32)*sum(sum(sum(sum(sum(sum(sum(
    cm_uus[%a,%g]*cm_uus[%ee,%f]*cm_us[%c,%d]*(
      cm_c_mixed[%a,%c,%d,%b]*cm_c[%b,%ee,%f,%g]+cm_c_star_mixed[%a,%c,%d,%b]*cm_c_star[%b,%ee,%f,%g]
    ),
  %a,1,dim),%b,1,dim),%c,1,dim),%d,1,dim),%ee,1,dim),%f,1,dim),%g,1,dim)
))$

cm_w1():=cm_do_trig_simp(cm_do_rat_simp(
  (1/8)*sum(sum(sum(sum(
    (cm_c[%a,%b,%c,%d]+%i*cm_c_star[%a,%b,%c,%d])*cm_c_upper[%a,%b,%c,%d],
  %a,1,dim),%b,1,dim),%c,1,dim),%d,1,dim)
))$

cm_w2():=cm_do_trig_simp(cm_do_rat_simp(
  (-1/16)*sum(sum(sum(sum(sum(sum(
    (cm_c_mixed[%a,%b,%c,%d]+%i*cm_c_star_mixed[%a,%b,%c,%d])*cm_c_mixed[%c,%d,%ee,%f]*cm_c_mixed[%ee,%f,%a,%b],
  %a,1,dim),%b,1,dim),%c,1,dim),%d,1,dim),%ee,1,dim),%f,1,dim)
))$

cm_m1():=cm_do_trig_simp(cm_do_rat_simp(
  (1/8)*sum(sum(sum(sum(
    cm_uus[%a,%b]*cm_uus[%c,%d]*(cm_c[%a,%c,%d,%b]+%i*cm_c_star[%a,%c,%d,%b]),
  %a,1,dim),%b,1,dim),%c,1,dim),%d,1,dim)
))$

cm_m2():=cm_do_trig_simp(cm_do_rat_simp(
  (1/16)*sum(sum(sum(sum(sum(sum(
    cm_uus[%b,%c]*cm_s[%ee,%f]*(
      (cm_c[%a,%b,%c,%d]*cm_c_upper[%a,%ee,%f,%d]-cm_c_star[%a,%b,%c,%d]*cm_c_star_upper[%a,%ee,%f,%d])
             /* Here WP had cm_c_star[%a,%c,%d,%b], which looks wrong compared to the pattern of indices
                elsewhere in the expression, produced results inconsistent with Ian Anderson's test
                (polynomial.mac), and was inconsistent with Woszczyna et al.,
                DOI: 10.4467/2353737XCT.15.110.4147 */
    )
  +(1/8)*%i*cm_uus[%b,%c]*cm_s[%ee,%f]*cm_c_star[%a,%b,%c,%d]*cm_c_upper[%a,%ee,%f,%d]
  ,
  %a,1,dim),%b,1,dim),%c,1,dim),%d,1,dim),%ee,1,dim),%f,1,dim)
))$

cm_m5():=cm_do_trig_simp(cm_do_rat_simp(
  (1/32)*sum(sum(sum(sum(sum(sum(sum(sum(
    cm_uus[%c,%d]*cm_uus[%ee,%f]*(cm_c_upper[%a,%g,%h,%b]+%i*cm_c_star_upper[%a,%g,%h,%b])*(
       cm_c[%a,%c,%d,%b]*cm_c[%g,%ee,%f,%h]+cm_c_star[%a,%c,%d,%b]*cm_c_star[%g,%ee,%f,%h]
    ),
  %a,1,dim),%b,1,dim),%c,1,dim),%d,1,dim),%ee,1,dim),%f,1,dim),%g,1,dim),%h,1,dim)
))$


cm_calculate_all_invariants():=block (
  cm_invariant:[cm_r(),cm_r1(),cm_r2(),cm_r3(),cm_m3(),cm_m4(),cm_w1(),cm_w2(),cm_m1(),cm_m2(),cm_m5()],
  cm_invariant_name:
              ["R","R1","R2","R3","M3","M4","W1","W2","M1","M2","M5"]
)$

cm_nonvanishing_invariants():= block (
  result:[],
  %inv:cm_invariant,
  for %k:1 thru length(%inv) do block (
    if %inv[%k]#0 then result:endcons(%k,result)
  ),
  result
)$

cm_print_invariants():=block (
  exptdispflag:false,
  %inv:cm_nonvanishing_invariants(),
  if length(%inv)=0 then block (
    print("All CM invariants are zero.")
  ) else block (
    print("Nonvanishing CM invariants:"),
    for %m:1 thru length(%inv) do block (
      %k:%inv[%m],
      print("  ",cm_invariant_name[%k],"=",cm_invariant[%k])
    )
  )
)$

/*
    Testing and error reporting.
 */

cm_assert_vanishing_invariants():=block (
  %inv:cm_nonvanishing_invariants(),
  if length(%inv)=0 then block (
    print("All CM invariants vanish, as asserted.")
  ),
  if length(%inv)#0 then block (
    print("error: cm_assert_vanishing_invariants() was called, but there are nonvanishing invariants:"),
    cm_print_invariants(),
    error("assertion failed in cm_assert_vanishing_invariants")
  )
)$

cm_assert(explanation,condition):=block (
  if condition=false then block (
    print("error: cm_assert says the test '",explanation,"' yielded ",condition),
    error("assertion failed in cm_assert")
  ),
  if condition=unknown then block (
    print("warning: cm_assert says the test '",explanation,"' yielded ",condition)
  ),
  true
)$

/* function to check for antisymmetry of a tensor on indices 1,2 and 3,4 */
cm_check_symmetry(t,explanation):=block (
  for %ii thru dim do
    for %jj thru dim do
      for %kk thru dim do
        for %ll thru dim do block (
          %u:t[%ii,%jj,%kk,%ll],
          %v:t[%jj,%ii,%kk,%ll],
          cm_assert(sconcat(explanation,", wrong symmetry on indices 1,2 at ",%ii,%jj,%kk,%ll," u,v=",%u,",",%v),
                    is(equal(%u,-%v))),
          %v:t[%ii,%jj,%ll,%kk],
          cm_assert(sconcat(explanation,", wrong symmetry on indices 3,4 at ",%ii,%jj,%kk,%ll," u,v=",%u,",",%v),
                    is(equal(%u,-%v)))
      )
)
$

/* function to check for tracelessness of a tensor on indices 1,3 and 2,3; it's assumed that one
   of these is upper and one lower */
cm_check_traceless(t,explanation):=block (
  for %ii thru dim do
    for %jj thru dim do
      for %kk thru dim do block (
        tr13:sum(t[%ll,%ii,%ll,%jj],%ll,1,dim),
        cm_assert(sconcat(explanation,", not traceless on [%ll,",%ii,",%ll,",%jj,"] trace=",tr13),
                    is(equal(tr13,0))),
        tr23:sum(t[%ii,%ll,%ll,%jj],%ll,1,dim),
        cm_assert(sconcat(explanation,", not traceless on [",%ii,",%ll,%ll,",%jj,"] trace=",tr23),
                    is(equal(tr23,0)))
      )
)$

cm_do_tests():=block (
  cm_assert("S^k_k=0",is(equal(cm_do_trig_simp(cm_do_rat_simp(sum(cm_us[%k,%k],%k,1,dim))),0))),
  cm_check_symmetry(cm_c,"C_ijkl is symmetric in i,j and k,l"),
  cm_check_symmetry(cm_c_mixed,"C_ij^kl is symmetric in i,j and k,l"),
  cm_check_symmetry(cm_c_star,"*C_ijkl is symmetric in i,j and k,l"),
  cm_check_symmetry(cm_c_star_upper,"*C^ijkl is symmetric in i,j and k,l"),
  cm_check_symmetry(cm_c_star_mixed,"*C_ij^kl is symmetric in i,j and k,l"),
  cm_check_traceless(cm_c_mixed,"C_ij^kl"),
  cm_check_traceless(cm_c_star_mixed,"*C_ij^kl")
)$
